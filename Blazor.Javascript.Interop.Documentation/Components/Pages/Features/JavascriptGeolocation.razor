@page "/features/js-geolocation"
@using Blazor.Javascript.Interop.Models

<PageTitle>Geolocation</PageTitle>

<PageDocumentation Title="Geolocation" Href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation" SecureContext>
    <p>The Geolocation interface represents an object able to obtain the position of the device programmatically. It gives Web content access to the location of the device. This allows a website or app to offer customized results based on the user's location.</p>


    @if (position is not null)
    {
        <div role="alert" class="not-prose alert shadow-lg">
            <i class="fa fa-info-circle fa-xl" />
            <div>
                <h3 class="font-bold">This is your position</h3>
                <div class="text-xs">N° @position.Coords.Longitude E° @position.Coords.Latitude</div>
            </div>
            <button class="btn btn-circle btn-sm" @onclick="() => position = null">
                <i class="fa fa-times" />
            </button>
        </div>
    }

    <PageDocumentationSection>
        <TitleContent>Get Current Position</TitleContent>
        <DescriptionContent>The <code>getCurrentPosition()</code> method of the Geolocation interface is used to get the current position of the device.</DescriptionContent>
        <ActionsContent>
            <button id="geolocation-get-current-position-button" class="btn btn-primary btn-wide" @onclick="GetCurrentPositionAsync">Get Position</button>
        </ActionsContent>
    </PageDocumentationSection>

    <PageDocumentationSection>
        <TitleContent>Watch Position</TitleContent>
        <DescriptionContent>The <code>watchPosition()</code> method of the Geolocation interface is used to register a handler function that will be called automatically each time the position of the device changes. You can also, optionally, specify an error handling callback function.</DescriptionContent>
        <ActionsContent>
            <button id="geolocation-watch-position-button" class="btn btn-primary btn-wide" @onclick="WatchPositionAsync">Start Watch</button>
            <button id="geolocation-clear-watch-button" class="btn btn-primary btn-wide" disabled="@(!watchId.HasValue)" @onclick="ClearWatchAsync">Stop Watch</button>
        </ActionsContent>
    </PageDocumentationSection>
</PageDocumentation>

@code
{
    private GeolocationPosition? position;
    private int? watchId;

    [CascadingParameter]
    public required JSWindow Window { get; set; }

    private async Task GetCurrentPositionAsync() => await Window.Navigator.Geolocation.GetCurrentPositionAsync(OnSuccessAsync);

    private async Task WatchPositionAsync() => watchId =await Window.Navigator.Geolocation.WatchPositionAsync(OnSuccessAsync);

    private async Task ClearWatchAsync()
    {
        await Window.Navigator.Geolocation.ClearWatchAsync(watchId!.Value);

        watchId = null;
        position = null;
    }

    private async ValueTask OnSuccessAsync(GeolocationPosition position)
    {
        this.position = position;
        await InvokeAsync(StateHasChanged);
    }
}