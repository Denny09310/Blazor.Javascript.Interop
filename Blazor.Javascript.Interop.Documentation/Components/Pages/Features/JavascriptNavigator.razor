@page "/features/js-navigator"
@using Blazor.Javascript.Interop.Models;

<PageTitle>Navigator</PageTitle>

<PageDocumentation Title="Navigator" Href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator">
    <p>The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.</p>

    <PageDocumentationSection>
        <TitleContent>Cookie Enabled</TitleContent>
        <DescriptionContent>The <code>cookieEnabled</code> returns a Boolean value that indicates whether cookies are enabled or not.</DescriptionContent>
        <ActionsContent>
            <button id="navigator-cookie-enabled-button" class="btn btn-primary btn-wide" @onclick="CookieEnabledAsync">Get Value</button>
        </ActionsContent>
    </PageDocumentationSection>

    <AlertResult @bind-Value="cookieEnabled" Message="@((cookieEnabled) => $"The cookies are {(cookieEnabled!.Value ? "" : "not")} enabled for this site")" />

    <PageDocumentationSection>
        <TitleContent>Device Memory</TitleContent>
        <DescriptionContent>The <code>deviceMemory</code> read-only property of the Navigator interface returns the approximate amount of device memory in gigabytes.</DescriptionContent>
        <ActionsContent>
            <button id="navigator-device-memory-button" class="btn btn-primary btn-wide" @onclick="DeviceMemoryAsync">Get Value</button>
        </ActionsContent>
    </PageDocumentationSection>

    <AlertResult @bind-Value="deviceMemory" Message="@((deviceMemory) => $"This device has at least {deviceMemory!.Value}GiB of RAM.")" />

    <PageDocumentationSection>
        <TitleContent>Hardware Concurrency</TitleContent>
        <DescriptionContent>The <code>hardwareConcurrency</code> read-only property returns the number of logical processors available to run threads on the user's computer.</DescriptionContent>
        <ActionsContent>
            <button id="navigator-hardware-concurrency-button" class="btn btn-primary btn-wide" @onclick="HardwareConcurrencyAsync">Get Value</button>
        </ActionsContent>
    </PageDocumentationSection>

    <AlertResult @bind-Value="hardwareConcurrency" Message="@((hardwareConcurrency) => $"This device has at least {hardwareConcurrency!.Value} logical processors.")" />

    <PageDocumentationSection>
        <TitleContent>Language</TitleContent>
        <DescriptionContent>The <code>language</code> read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.</DescriptionContent>
        <ActionsContent>
            <button id="navigator-language-button" class="btn btn-primary btn-wide" @onclick="LanguageAsync">Get Value</button>
        </ActionsContent>
    </PageDocumentationSection>

    <AlertResult @bind-Value="language" Message="@((language) => $"Current language is <b>{language?.ToUpper()}</b>")" />

    <PageDocumentationSection>
        <TitleContent>Languages</TitleContent>
        <DescriptionContent>The <code>languages</code> read-only property returns an array of strings representing the user's preferred languages</DescriptionContent>
        <ActionsContent>
            <button id="navigator-languages-button" class="btn btn-primary btn-wide" @onclick="LanguagesAsync">Get Value</button>
        </ActionsContent>
    </PageDocumentationSection>

    <AlertResult @bind-Value="languages" Message="@((languages) => $"User preferred languages are {(languages is null || !languages.Any() ? "None" : @$"[""{string.Join("\", \"", languages)}""]")}")" />

    <PageDocumentationSection>
        <TitleContent>Max Touch Points</TitleContent>
        <DescriptionContent>The <code>maxTouchPoints</code> read-only property of the Navigator interface returns the maximum number of simultaneous touch contact points are supported by the current device.</DescriptionContent>
        <ActionsContent>
            <button id="navigator-max-touch-points-button" class="btn btn-primary btn-wide" @onclick="MaxTouchPointsAsync">Get Value</button>
        </ActionsContent>
    </PageDocumentationSection>

    <AlertResult @bind-Value="maxTouchPoints" Message="@((maxTouchPoints) => $"This browser supports {maxTouchPoints!.Value} points")" />

    <PageDocumentationSection>
        <TitleContent>Online</TitleContent>
        <DescriptionContent>The <code>onLine</code> returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline.</DescriptionContent>
        <ActionsContent>
            <button id="navigator-on-line-button" class="btn btn-primary btn-wide" @onclick="OnlineAsync">Get Value</button>
        </ActionsContent>
    </PageDocumentationSection>

    <div class="alert mt-2">
        <i class="fa fa-info-circle text-info" />
        <span>This functionality only works with Blazor Webassembly, as the server needs an active connection</span>
    </div>

    <AlertResult @bind-Value="online" Message="@((online) => $"You are {(online!.Value ? "online" : "offline")}")" />

    <PageDocumentationSection>
        <TitleContent>Pdf Viewer Enabled</TitleContent>
        <DescriptionContent>The <code>pdfViewerEnabled</code> read-only property of the Navigator interface indicates whether the browser supports inline display of PDF files when navigating to them.</DescriptionContent>
        <ActionsContent>
            <button id="navigator-pdf-viewer-enabled-button" class="btn btn-primary btn-wide" @onclick="PdfViewerEnabledAsync">Get Value</button>
        </ActionsContent>
    </PageDocumentationSection>

    <AlertResult @bind-Value="pdfViewerEnabled" Message="@((pdfViewerEnabled) => $"The PDF viewer is {(pdfViewerEnabled!.Value ? "enabled" : "disabled")}")" />

    <PageDocumentationSection>
        <TitleContent>User Agent</TitleContent>
        <DescriptionContent>The <code>userAgent</code> read-only property returns the user agent string for the current browser.</DescriptionContent>
        <ActionsContent>
            <button id="navigator-user-agent-button" class="btn btn-primary btn-wide" @onclick="UserAgentAsync">Get Value</button>
        </ActionsContent>
    </PageDocumentationSection>

    <AlertResult @bind-Value="userAgent" Message="@((userAgent) => $"The user-agent is <b>{userAgent}</b>")" />

    <PageDocumentationSection>
        <TitleContent>User Agent Data</TitleContent>
        <DescriptionContent>The <code>userAgentData</code> read-only property of the Navigator interface returns a NavigatorUAData object which can be used to access the User-Agent Client Hints API.</DescriptionContent>
        <ActionsContent>
            <button id="navigator-user-agent-data-button" class="btn btn-primary btn-wide" @onclick="UserAgentDataAsync">Get Value</button>
        </ActionsContent>
    </PageDocumentationSection>

    <AlertResult @bind-Value="userAgentData" Message="@((userAgentData) => $"The platform is {userAgentData!.Platform} and is {(userAgentData!.Mobile ? "" : "not")} a mobile platform. The browser is {userAgentData.Brands.First().Brand} with version {userAgentData.Brands.First().Version}")" />

    <PageDocumentationSection>
        <TitleContent>Web Driver</TitleContent>
        <DescriptionContent>The <code>webDriver</code> read-only property of the navigator interface indicates whether the user agent is controlled by automation.</DescriptionContent>
        <ActionsContent>
            <button id="navigator-web-driver-button" class="btn btn-primary btn-wide" @onclick="WebDriverAsync">Get Value</button>
        </ActionsContent>
    </PageDocumentationSection>

    <AlertResult @bind-Value="webDriver" Message="@((webDriver) => $"The site is {(webDriver!.Value ? "" : "not")} using a WebDriver")" />
</PageDocumentation>

@code
{
    private bool? cookieEnabled, online, pdfViewerEnabled, webDriver;
    private string? language, userAgent;
    private double? deviceMemory;
    private int? hardwareConcurrency, maxTouchPoints;

    private NavigatorUAData? userAgentData;
    private IEnumerable<string>? languages;

    [CascadingParameter]
    public required JSWindow Window { get; set; }

    private async Task CookieEnabledAsync() => cookieEnabled = await Window.Navigator.CookieEnabledAsync();

    private async Task DeviceMemoryAsync() => deviceMemory = await Window.Navigator.DeviceMemoryAsync();

    private async Task HardwareConcurrencyAsync() => hardwareConcurrency = await Window.Navigator.HardwareConcurrencyAsync();

    private async Task LanguageAsync() => language = await Window.Navigator.LanguageAsync();

    private async Task LanguagesAsync() => languages = await Window.Navigator.LanguagesAsync();

    private async Task MaxTouchPointsAsync() => maxTouchPoints = await Window.Navigator.MaxTouchPointsAsync();

    private async Task OnlineAsync() => online = await Window.Navigator.OnlineAsync();

    private async Task PdfViewerEnabledAsync() => pdfViewerEnabled = await Window.Navigator.PdfViewerEnabledAsync();

    private async Task UserAgentAsync() => userAgent = await Window.Navigator.UserAgentAsync();

    private async Task UserAgentDataAsync() => userAgentData = await Window.Navigator.UserAgentDataAsync();

    private async Task WebDriverAsync() => webDriver = await Window.Navigator.WebDriverAsync();
}