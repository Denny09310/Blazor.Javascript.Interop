@page "/features/js-storage"
@using Blazor.Javascript.Interop.Contracts

<PageTitle>Storage</PageTitle>

<PageDocumentation Href="https://developer.mozilla.org/en-US/docs/Web/API/Storage" Title="Storage">
    <AdditionalRightContent>
        <div class="tooltip tooltip-right" data-tip="Toggle from local to session">
            <input @bind="useSessionStorage" type="checkbox" class="toggle toggle-primary toggle-sm" />
        </div>
    </AdditionalRightContent>
    <ChildContent>
        <p>The Storage interface of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API" target="_blank">Web Storage API</a> provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.</p>

        <PageDocumentationSection>
            <TitleContent>Length</TitleContent>
            <DescriptionContent>The <code>length</code> read-only property of the Storage interface returns the number of data items stored in a given Storage object.</DescriptionContent>
            <ActionsContent>
                <button id="storage-length-button" class="btn btn-primary btn-wide" @onclick="LengthAsync">Get Length</button>
            </ActionsContent>
        </PageDocumentationSection>

        <AlertResult @bind-Value="length" Message="@((length) => $"The length of the {(useSessionStorage ? "session" : "local")}Storage is {length}")" />

        <PageDocumentationSection>
            <TitleContent>Key</TitleContent>
            <DescriptionContent>The <code>key()</code> method of the Storage interface, when passed a number n, returns the name of the nth key in a given Storage object. The order of keys is user-agent defined, so you should not rely on it.</DescriptionContent>
            <ActionsContent>
                <button id="storage-key-button" class="btn btn-primary btn-wide" @onclick="KeyAsync">Get</button>
            </ActionsContent>
        </PageDocumentationSection>

        <AlertResult T="int" Value="index" Message="@((index) => $"The vaule at index \"{index}\" of the {(useSessionStorage ? "session" : "local")}Storage is {(string.IsNullOrEmpty(value) ? "not set" : value)}")" />

        <PageDocumentationSection>
            <TitleContent>Get Item</TitleContent>
            <DescriptionContent>The <code>getItem()</code> method of the Storage interface, when passed a key name, will return that key's value, or null if the key does not exist, in the given Storage object.</DescriptionContent>
            <ActionsContent>
                <button id="storage-get-item-button" class="btn btn-primary btn-wide" @onclick="GetItemAsync">Get</button>
            </ActionsContent>
        </PageDocumentationSection>

        <AlertResult T="string" Value="key" Message="@((key) => $"The vaule with key \"{key}\" of the {(useSessionStorage ? "session" : "local")}Storage is {(string.IsNullOrEmpty(value) ? "not set" : value)}")" />

        <PageDocumentationSection>
            <TitleContent>Set Item</TitleContent>
            <DescriptionContent>The <code>setItem()</code> method of the Storage interface, when passed a key name and value, will add that key to the given Storage object, or update that key's value if it already exists.</DescriptionContent>
            <ActionsContent>
                <button id="storage-set-item-button" class="btn btn-primary btn-wide" @onclick="SetItemAsync">Set</button>
            </ActionsContent>
        </PageDocumentationSection>

        <PageDocumentationSection>
            <TitleContent>Remove Item</TitleContent>
            <DescriptionContent>The <code>removeItem()</code> method of the Storage interface, when passed a key name, will remove that key from the given Storage object if it exists. The Storage interface of the Web Storage API provides access to a particular domain's session or local storage.</DescriptionContent>
            <ActionsContent>
                <button id="storage-remove-item-button" class="btn btn-primary btn-wide btn-error" @onclick="RemoveItemAsync">Remove</button>
            </ActionsContent>
        </PageDocumentationSection>

        <PageDocumentationSection>
            <TitleContent>Clear</TitleContent>
            <DescriptionContent>The <code>clear()</code> method of the Storage interface clears all keys stored in a given Storage object.</DescriptionContent>
            <ActionsContent>
                <button id="storage-clear-button" class="btn btn-primary btn-wide btn-error" @onclick="ClearAsync">
                    <i class="fa fa-trash" />
                    Clear
                </button>
            </ActionsContent>
        </PageDocumentationSection>
    </ChildContent>
</PageDocumentation>

@code
{
    private const string key = "test-key";
    private const int index = 0;

    private bool useSessionStorage;
    private int? length;
    private string? value;

    [CascadingParameter]
    public required JSWindow Window { get; set; }

    public IStorage Storage => useSessionStorage ? Window.SessionStorage : Window.LocalStorage;

    private async Task LengthAsync() => length = await Storage.LengthAsync();

    private async Task KeyAsync() => value = await Storage.KeyAsync<string>(index);

    private async Task GetItemAsync() => value = await Storage.GetItemAsync<string>(key);

    private async Task SetItemAsync() => await Storage.SetItemAsync(key, "This is a sample value");

    private async Task RemoveItemAsync() => await Storage.RemoveItemAsync(key);

    private async Task ClearAsync() => await Storage.ClearAsync();
}
