@page "/features/js-storage"
@using Blazor.Javascript.Interop.Contracts

<PageTitle>Storage</PageTitle>

<PageDocumentation Title="Storage">
    <AdditionalRightContent>
        <div class="tooltip tooltip-right" data-tip="Toggle from local to session">
            <input @bind="useSessionStorage" type="checkbox" class="toggle toggle-primary toggle-sm" />
        </div>
    </AdditionalRightContent>
    <ChildContent>
        <p>The Storage interface of the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API" target="_blank">Web Storage API</a> provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.</p>

        @if (currentLength.HasValue)
        {
            <div role="alert" class="not-prose alert shadow-lg">
                <i class="fa fa-info-circle fa-xl" />
                <div>
                    <h3 class="font-bold">This is the length of the @(useSessionStorage ? "session" : "local")Storage</h3>
                    <div class="text-sm">@currentLength.Value</div>
                </div>
                <button class="btn btn-circle btn-sm" @onclick="() => currentLength = null">
                    <i class="fa fa-times" />
                </button>
            </div>
        }

        @if (currentIndex.HasValue)
        {
            <div role="alert" class="not-prose alert shadow-lg">
                <i class="fa fa-info-circle fa-xl" />
                <div>
                    <h3 class="font-bold">This is the value of the item at index @currentIndex.Value in @(useSessionStorage ? "session" : "local")Storage</h3>
                    <div class="text-sm">@currentValue</div>
                </div>
                <button class="btn btn-circle btn-sm" @onclick="() => currentIndex = null">
                    <i class="fa fa-times" />
                </button>
            </div>
        }

        @if (!string.IsNullOrEmpty(currentKey))
        {
            <div role="alert" class="not-prose alert shadow-lg">
                <i class="fa fa-info-circle fa-xl" />
                <div>
                    <h3 class="font-bold">This is the value of the item with key "@currentKey" in @(useSessionStorage ? "session" : "local")Storage</h3>
                    <div class="text-sm">@currentValue</div>
                </div>
                <button class="btn btn-circle btn-sm" @onclick="() => currentKey = null">
                    <i class="fa fa-times" />
                </button>
            </div>
        }

        <PageDocumentationSection>
            <TitleContent>Length</TitleContent>
            <DescriptionContent>The <code>length</code> read-only property of the Storage interface returns the number of data items stored in a given Storage object.</DescriptionContent>
            <ActionsContent>
                <button id="storage-length-button" class="btn btn-primary btn-wide" @onclick="LengthAsync">Get Length</button>
            </ActionsContent>
        </PageDocumentationSection>

        <PageDocumentationSection>
            <TitleContent>Key</TitleContent>
            <DescriptionContent>The <code>key()</code> method of the Storage interface, when passed a number n, returns the name of the nth key in a given Storage object. The order of keys is user-agent defined, so you should not rely on it.</DescriptionContent>
            <ActionsContent>
                <input @bind-value="currentIndex" type="number" inputmode="numeric" class="input input-bordered w-full max-w-xs" placeholder="Item Index" />
                <button id="storage-key-button" class="btn btn-primary btn-wide" @onclick="KeyAsync">Get</button>
            </ActionsContent>
        </PageDocumentationSection>

        <PageDocumentationSection>
            <TitleContent>Get Item</TitleContent>
            <DescriptionContent>The <code>getItem()</code> method of the Storage interface, when passed a key name, will return that key's value, or null if the key does not exist, in the given Storage object.</DescriptionContent>
            <ActionsContent>
                <input @bind-value="currentKey" type="text" class="input input-bordered w-full max-w-xs" placeholder="Item Key" />
                <button id="storage-get-item-button" class="btn btn-primary btn-wide" @onclick="GetItemAsync">Get</button>
            </ActionsContent>
        </PageDocumentationSection>

        <PageDocumentationSection>
            <TitleContent>Set Item</TitleContent>
            <DescriptionContent>The <code>setItem()</code> method of the Storage interface, when passed a key name and value, will add that key to the given Storage object, or update that key's value if it already exists.</DescriptionContent>
            <ActionsContent>
                <input @bind-value="currentKey" type="text" class="input input-bordered w-full max-w-xs" placeholder="Item Key" />
                <button id="storage-set-item-button" class="btn btn-primary btn-wide" @onclick="SetItemAsync">Set</button>
            </ActionsContent>
        </PageDocumentationSection>

        <PageDocumentationSection>
            <TitleContent>Remove Item</TitleContent>
            <DescriptionContent>The <code>removeItem()</code> method of the Storage interface, when passed a key name, will remove that key from the given Storage object if it exists. The Storage interface of the Web Storage API provides access to a particular domain's session or local storage.</DescriptionContent>
            <ActionsContent>
                <input @bind-value="currentKey" type="text" class="input input-bordered w-full max-w-xs" placeholder="Item Key" />
                <button id="storage-remove-item-button" class="btn btn-primary btn-wide btn-error" @onclick="RemoveItemAsync">Remove</button>
            </ActionsContent>
        </PageDocumentationSection>

        <PageDocumentationSection>
            <TitleContent>Clear</TitleContent>
            <DescriptionContent>The <code>clear()</code> method of the Storage interface clears all keys stored in a given Storage object.</DescriptionContent>
            <ActionsContent>
                <button id="storage-clear-button" class="btn btn-primary btn-wide btn-error" @onclick="ClearAsync">
                    <i class="fa fa-trash" />
                    Clear
                </button>
            </ActionsContent>
        </PageDocumentationSection>
    </ChildContent>
</PageDocumentation>

@code
{
    private bool useSessionStorage;
    private int? currentLength, currentIndex;
    private string? currentKey, currentValue;

    [CascadingParameter]
    public required JSWindow Window { get; set; }

    public IStorage Storage => useSessionStorage ? Window.SessionStorage : Window.LocalStorage;

    private async Task LengthAsync() => currentLength = await Storage.LengthAsync();

    private async Task KeyAsync()
    {
        if (currentIndex.HasValue)
        {
            currentValue = await Storage.KeyAsync<string>(currentIndex.Value);
        }
    }

    private async Task GetItemAsync()
    {
        if (!string.IsNullOrEmpty(currentKey))
        {
            currentValue = await Storage.GetItemAsync<string>(currentKey);
        }
    }

    private async Task SetItemAsync()
    {
        if (!string.IsNullOrEmpty(currentKey))
        {
           await Storage.SetItemAsync(currentKey, "This is a sample value");
        }
    }

    private async Task RemoveItemAsync()
    {
        if (!string.IsNullOrEmpty(currentKey))
        {
            await Storage.RemoveItemAsync(currentKey);
        }
    }

    private async Task ClearAsync() => await Storage.ClearAsync();
}
