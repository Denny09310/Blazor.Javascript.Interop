@page "/functionalities/clipboard"
@using Blazor.Javascript.Interop.Entities
@using System.Text.Json

<PageTitle>Clipboard</PageTitle>

<Container Overview="The Clipboard interface of the Clipboard API provides read and write access to the contents of the system clipboard. This allows a web application to implement cut, copy, and paste features.">
    <TitleContent>
        <h2>Clipboard <SecureContextIcon /></h2>
    </TitleContent>
    <ChildContent>
        <h4>Read</h4>
        <p>The <b>ReadAsync()</b> method of the Clipboard interface requests a copy of the clipboard's contents, fulfilling the returned Promise with the data.</p>

        <WorkInProgressAlert />

        <h4 class="mt-4">Read Text</h4>
        <p>The <b>ReadTextAsync()</b> method of the Clipboard interface returns a Promise which fulfils with a copy of the textual contents of the system clipboard.</p>

        <div class="d-flex align-items-center gap-2">
            <button class="btn btn-outline-dark" id="window-navigator-bluetooth-get-availability-button" @onclick="ReadTextAsync">Try out</button>
        </div>

        @if (!string.IsNullOrWhiteSpace(clipboard))
        {
            <div class="alert alert-info mt-2" role="alert">
                The text from the clipboard is: @clipboard
            </div>
        }

        <h4 class="mt-4">Write</h4>
        <p>The <b>WriteTextAsync()</b> method of the Clipboard interface writes arbitrary data to the clipboard, such as images, fulfilling the returned Promise on completion. This can be used to implement cut and copy functionality.</p>

        <WorkInProgressAlert />

        <h4 class="mt-4">Write Text</h4>
        <p>The <b>WriteTextAsync()</b>  method of the Clipboard interface writes the specified text to the system clipboard, returning a Promise that is resolved once the system clipboard has been updated.</p>

        <div class="d-flex align-items-center gap-2">
            <button class="btn btn-outline-dark" id="window-navigator-bluetooth-get-availability-button" @onclick="WriteTextAsync">Try out</button>
        </div>

    </ChildContent>
</Container>

@code 
{
    private string? clipboard;

    [CascadingParameter]
    public required JSWindow Window { get; set; }

    private async Task ReadTextAsync() => clipboard = await Window.Navigator.Clipboard.ReadTextAsync();

    private async Task WriteTextAsync() => await Window.Navigator.Clipboard.WriteTextAsync("This is a sample content of the clipboard");
}
