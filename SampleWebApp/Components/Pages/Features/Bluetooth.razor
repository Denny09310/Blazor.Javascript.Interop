@page "/features/bluetooth"
@using Blazor.Javascript.Interop.Entities

<PageTitle>Bluetooth</PageTitle>

<Container Title="Bluetooth" Overview="The Bluetooth interface of the Web Bluetooth API provides methods to query Bluetooth availability and request access to devices." RequireSecureContext ExperimentalFeature>
    <Section Title="Get Availability" Overview="The <b>GetAvailabilityAsync()</b> method of the Bluetooth interface nominally returns <b>true</b> if the user agent can support Bluetooth (because the device has a Bluetooth adapter), and <b>false</b> otherwise.">
        <Icons>
            <ExperimentalIcon />
        </Icons>
        <Content>
            <button class="btn btn-outline-dark" id="window-navigator-bluetooth-get-availability-button" @onclick="GetAvailablityAsync">Check Availabilty</button>
        </Content>
    </Section>

    @if (available.HasValue)
    {
        <div class="alert @(available.Value ? "alert-success" : "alert-error") mt-2" role="alert">
            The bluetooth @(available.Value ? "is" : "is not") available for your device
        </div>
    }

    <Section Title="Get Devices" Overview="The <b>GetDevicesAsync()</b> method of the Bluetooth interface returns an array containing the Bluetooth devices that this origin is allowed to access — including those that are out of range and powered off.">
        <WorkInProgressAlert />
    </Section>
</Container>

@code
{
    private bool? available;

    [CascadingParameter]
    public required JSWindow Window { get; set; }

    private async Task GetAvailablityAsync() => available = await Window.Navigator.Bluetooth.GetAvailabiltyAsync();
}