@page "/features/clipboard"
@using Blazor.Javascript.Interop.Entities
@using System.Text.Json

<PageTitle>Clipboard</PageTitle>

<Container Title="Clipboard" Overview="The Clipboard interface of the Clipboard API provides read and write access to the contents of the system clipboard. This allows a web application to implement cut, copy, and paste features." RequireSecureContext>
    <Section Title="Read" Overview="The <b>ReadAsync()</b> method of the Clipboard interface requests a copy of the clipboard's contents, fulfilling the returned Promise with the data.">
        <button class="btn btn-outline-dark" id="window-navigator-clipboard-read-text-button" @onclick="ReadAsync">Try out</button>
    </Section>


    <Section Title="Read Text" Overview="The <b>ReadTextAsync()</b> method of the Clipboard interface returns a Promise which fulfils with a copy of the textual contents of the system clipboard.">
        <button class="btn btn-outline-dark" id="window-navigator-clipboard-read-text-button" @onclick="ReadTextAsync">Try out</button>
    </Section>

    @if (!string.IsNullOrWhiteSpace(clipboard))
    {
        <div class="alert alert-info mt-2" role="alert">
            The text from the clipboard is: @clipboard
        </div>
    }

    <Section Title="Write" Overview="The <b>WriteTextAsync()</b> of the Clipboard interface writes the specified text to the system clipboard, returning a Promise that is resolved once the system clipboard has been updated.">
        <WorkInProgressAlert />
    </Section>

    <Section Title="Write Text" Overview="The <b>WriteTextAsync()</b>  method of the Clipboard interface writes the specified text to the system clipboard, returning a Promise that is resolved once the system clipboard has been updated.">
        <button class="btn btn-outline-dark" id="window-navigator-clipboard-write-text-button" @onclick="WriteTextAsync">Try out</button>
    </Section>
</Container>

@code
{
    private string? clipboard;

    [CascadingParameter]
    public required JSWindow Window { get; set; }

    private async Task ReadAsync() => await Window.Navigator.Clipboard.ReadAsync();

    private async Task ReadTextAsync() => clipboard = await Window.Navigator.Clipboard.ReadTextAsync();

    private async Task WriteTextAsync() => await Window.Navigator.Clipboard.WriteTextAsync("This is a sample content of the clipboard");
}
