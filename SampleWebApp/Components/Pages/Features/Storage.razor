@page "/features/storage"

<PageTitle>Storage</PageTitle>

<Container Overview="The Storage interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.">
    <TitleContent>
        <div class="d-flex align-items-center gap-2">
            <h2 style="width: 250px;">@(type is StorageType.LocalStorage ? "Local Storage" : "Session Storage")</h2>
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" role="switch" id="storage-type-toggle" @onchange="(e) => type= (bool)e.Value! ? StorageType.SessionStorage : StorageType.LocalStorage">
            </div>
        </div>
    </TitleContent>

    <ChildContent>
        <Section Title="Clear" Overview="The <b>Storage.ClearAsync()</b> method of the Storage interface clears all keys stored in a given Storage object.">
            <button class="btn btn-danger" id="window-local-storage-clear-button" @onclick="ClearAsync">Clear All</button>
        </Section>

        <Section Title="Set Item" Overview="The <b>Storage.SetItemAsync</b> method of the Storage interface, when passed a key name and value, will add that key to the given Storage object, or update that key's value if it already exists.">
            <button class="btn btn-outline-dark" id="window-local-storage-set-item-button" @onclick="SetItemAsync">Set Sample Value</button>
        </Section>

        <Section Title="Get Item" Overview="The <b>Storage.GetItemAsync</b> method of the Storage interface, when passed a key name, will return that key's value, or null if the key does not exist, in the given Storage object.">
            <button class="btn btn-outline-dark" id="window-local-storage-get-item-button" @onclick="GetItemAsync">Get Sample Value</button>
        </Section>

        @if (!string.IsNullOrWhiteSpace(value))
        {
            <div class="alert alert-info mt-2" role="alert">
                The value of the key <b>sample-value</b> is "@value"
            </div>
        }

        <Section Title="Key" Overview="The <b>Storage.KeyAsync</b> method of the Storage interface, when passed a number n, returns the name of the nth key in a given Storage object. The order of keys is user-agent defined, so you should not rely on it.">
            <button class="btn btn-outline-dark" id="window-local-storage-key-button" @onclick="KeyAsync">Get Sample Value</button>
        </Section>

        @if (!string.IsNullOrWhiteSpace(key))
        {
            <div class="alert alert-info mt-2" role="alert">
                The value of the index <b>0</b> is "@key"
            </div>
        }

        <Section Title="Remove Item" Overview="The <b>Storage.RemoveItemAsync</b> method of the Storage interface, when passed a key name, will remove that key from the given Storage object if it exists. The Storage interface of the Web Storage API provides access to a particular domain's session or local storage.">
            <button class="btn btn-danger" id="window-local-storage-remove-item-button" @onclick="RemoveItemAsync">Remove Sample Value</button>
        </Section>

        <Section Title="Length" Overview="The length read-only property of the Storage interface returns the number of data items stored in a given Storage object.">
            <button class="btn btn-outline-dark" id="window-local-storage-length-button" @onclick="LengthAsync">Get Length</button>
        </Section>

        @if (length > -1)
        {
            <div class="alert alert-info mt-2" role="alert">
                The length of the Storage is @length
            </div>
        }
    </ChildContent>
</Container>

@code
{
    private StorageType type;
    private string? value, key;
    private int length = -1;

    [CascadingParameter]
    public required JSWindow Window { get; set; }

    private async Task ClearAsync() => await (type is StorageType.LocalStorage ? Window.LocalStorage.ClearAsync() : Window.SessionStorage.ClearAsync());

    private async Task SetItemAsync() => await (type is StorageType.LocalStorage ? Window.LocalStorage.SetItemAsync("sample-value", "This is a sample value") : Window.SessionStorage.SetItemAsync("sample-value", "This is a sample value"));

    private async Task GetItemAsync() => value = await (type is StorageType.LocalStorage ? Window.LocalStorage.GetItemAsync<string>("sample-value") : Window.SessionStorage.GetItemAsync<string>("sample-value"));

    private async Task KeyAsync() => key = await (type is StorageType.LocalStorage ? Window.LocalStorage.KeyAsync(0) : Window.SessionStorage.KeyAsync(0));

    private async Task RemoveItemAsync() => await (type is StorageType.LocalStorage ? Window.LocalStorage.RemoveItemAsync("sample-value") : Window.SessionStorage.RemoveItemAsync("sample-value"));

    private async Task LengthAsync() => length = await (type is StorageType.LocalStorage ? Window.LocalStorage.LengthAsync() : Window.SessionStorage.LengthAsync());
}