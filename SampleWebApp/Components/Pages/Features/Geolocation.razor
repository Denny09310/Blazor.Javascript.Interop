@page "/features/geolocation"

<PageTitle>Geolocation</PageTitle>

<Container Title="Geolocation" Overview="The Geolocation interface represents an object able to obtain the position of the device programmatically. It gives Web content access to the location of the device. This allows a website or app to offer customized results based on the user's location." RequireSecureContext>
    <Section Title="Get Current Position" Overview="The <b>GetCurrentPositionAsync()</b> method of the Geolocation interface is used to get the current position of the device.">
        <button class="btn btn-outline-dark" id="window-navigator-geolocation-get-current-position-button" @onclick="GetCurrentPositionAsync">Get current position</button>
    </Section>

    @if (position is not null)
    {
        <div class="alert alert-info mt-2" role="alert">
            Your position is N° @position.Coords.Latitude E° @position.Coords.Longitude
        </div>
    }

    <Section Title="Watch Position" Overview="The <b>GetCurrentPositionAsync()</b> method of the Geolocation interface is used to register a handler function that will be called automatically each time the position of the device changes. You can also, optionally, specify an error handling callback function.">
        @if (id.HasValue)
        {
            <button class="btn btn-outline-dark" id="window-navigator-geolocation-get-current-position-button" @onclick="ClearWatchAsync">Clear Watch Position</button>
        }
        else
        {
            <button class="btn btn-outline-dark" id="window-navigator-geolocation-get-current-position-button" @onclick="WatchPositionAsync">Watch Position</button>
        }

    </Section>
</Container>

@code
{
    private GeolocationPosition? position;
    private int? id;

    [CascadingParameter]
    public required JSWindow Window { get; set; }

    private async Task GetCurrentPositionAsync() => await Window.Navigator.Geolocation.GetCurrentPositionAsync(OnSuccessCallbackAsync);

    private async Task WatchPositionAsync() => id = await Window.Navigator.Geolocation.WatchPositionAsync(OnSuccessCallbackAsync);

    private async Task ClearWatchAsync()
    {
        if (id.HasValue)
        {
            await Window.Navigator.Geolocation.ClearWatchAsync(id.Value);
            id = null;
            position = null;
        }    
    }

    private async ValueTask OnSuccessCallbackAsync(GeolocationPosition position)
    {
        this.position = position;
        await InvokeAsync(StateHasChanged);
    }
}